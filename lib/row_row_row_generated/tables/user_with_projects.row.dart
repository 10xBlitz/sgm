// Generated by row_row_row tool
// Auto-generated file. Do not modify.
import 'dart:convert';

class UserWithProjectsRow {
  static const field = (
    id: 'id',
    name: 'name',
    createdAt: 'created_at',
    role: 'role',
    email: 'email',
    activated: 'activated',
    phoneNumber: 'phone_number',
    acceptedAt: 'accepted_at',
    rejectedAt: 'rejected_at',
    profileImage: 'profile_image',
    details: 'details',
    isBanned: 'is_banned',
    asanaGid: 'asana_gid',
    acceptedTermsAt: 'accepted_terms_at',
    emailConfirmedAt: 'email_confirmed_at',
    emailConfirmationCode: 'email_confirmation_code',
    projects: 'projects',
    projectIds: 'project_ids',
    projectNames: 'project_names',
  );

  final String? id;
  final String? name;
  final DateTime? createdAt;
  final String? role;
  final String? email;
  final bool? activated;
  final String? phoneNumber;
  final DateTime? acceptedAt;
  final DateTime? rejectedAt;
  final String? profileImage;
  final String? details;
  final bool? isBanned;
  final String? asanaGid;
  final DateTime? acceptedTermsAt;
  final DateTime? emailConfirmedAt;
  final String? emailConfirmationCode;
  final Map<String, dynamic>? projects;
  final dynamic? projectIds;
  final dynamic? projectNames;

  const UserWithProjectsRow({
    this.id,
    this.name,
    this.createdAt,
    this.role,
    this.email,
    this.activated,
    this.phoneNumber,
    this.acceptedAt,
    this.rejectedAt,
    this.profileImage,
    this.details,
    this.isBanned,
    this.asanaGid,
    this.acceptedTermsAt,
    this.emailConfirmedAt,
    this.emailConfirmationCode,
    this.projects,
    this.projectIds,
    this.projectNames,
  });

  factory UserWithProjectsRow.fromJson(Map<String, dynamic> json) {
    return UserWithProjectsRow(
      id: json[field.id],
      name: json[field.name],
      createdAt: json[field.createdAt] == null ? null : DateTime.tryParse(json[field.createdAt] ?? ''),
      role: json[field.role],
      email: json[field.email],
      activated: json[field.activated],
      phoneNumber: json[field.phoneNumber],
      acceptedAt: json[field.acceptedAt] == null ? null : DateTime.tryParse(json[field.acceptedAt] ?? ''),
      rejectedAt: json[field.rejectedAt] == null ? null : DateTime.tryParse(json[field.rejectedAt] ?? ''),
      profileImage: json[field.profileImage],
      details: json[field.details],
      isBanned: json[field.isBanned],
      asanaGid: json[field.asanaGid],
      acceptedTermsAt: json[field.acceptedTermsAt] == null ? null : DateTime.tryParse(json[field.acceptedTermsAt] ?? ''),
      emailConfirmedAt: json[field.emailConfirmedAt] == null ? null : DateTime.tryParse(json[field.emailConfirmedAt] ?? ''),
      emailConfirmationCode: json[field.emailConfirmationCode],
      projects: json[field.projects] == null ? null : (json[field.projects] is String ? jsonDecode(json[field.projects]) : Map<String, dynamic>.from(json[field.projects])),
      projectIds: json[field.projectIds],
      projectNames: json[field.projectNames],
    );
  }

  Map<String, dynamic> toJson() {
    return {
      field.id: id,
      field.name: name,
      field.createdAt: createdAt?.toIso8601String(),
      field.role: role,
      field.email: email,
      field.activated: activated,
      field.phoneNumber: phoneNumber,
      field.acceptedAt: acceptedAt?.toIso8601String(),
      field.rejectedAt: rejectedAt?.toIso8601String(),
      field.profileImage: profileImage,
      field.details: details,
      field.isBanned: isBanned,
      field.asanaGid: asanaGid,
      field.acceptedTermsAt: acceptedTermsAt?.toIso8601String(),
      field.emailConfirmedAt: emailConfirmedAt?.toIso8601String(),
      field.emailConfirmationCode: emailConfirmationCode,
      field.projects: projects,
      field.projectIds: projectIds,
      field.projectNames: projectNames,
    };
  }
}
