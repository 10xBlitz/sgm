// Generated by row_row_row tool
// Auto-generated file. Do not modify.
import 'dart:convert';

class TaskAppointmentSummaryRow {
  static const field = (
    taskAppointmentId: 'task_appointment_id',
    taskAppointmentCreatedAt: 'task_appointment_created_at',
    taskId: 'task_id',
    generalDeposit: 'general_deposit',
    generalDiscountRate: 'general_discount_rate',
    generalDiscountAmount: 'general_discount_amount',
    dueDate: 'due_date',
    notes: 'notes',
    addedBy: 'added_by',
    generalRefund: 'general_refund',
    generalExpenses: 'general_expenses',
    totalGeneralExpenseAmount: 'total_general_expense_amount',
    procedureSummaries: 'procedure_summaries',
  );

  final String? taskAppointmentId;
  final DateTime? taskAppointmentCreatedAt;
  final String? taskId;
  final double? generalDeposit;
  final double? generalDiscountRate;
  final double? generalDiscountAmount;
  final DateTime? dueDate;
  final String? notes;
  final String? addedBy;
  final double? generalRefund;
  final Map<String, dynamic>? generalExpenses;
  final double? totalGeneralExpenseAmount;
  final Map<String, dynamic>? procedureSummaries;

  const TaskAppointmentSummaryRow({
    this.taskAppointmentId,
    this.taskAppointmentCreatedAt,
    this.taskId,
    this.generalDeposit,
    this.generalDiscountRate,
    this.generalDiscountAmount,
    this.dueDate,
    this.notes,
    this.addedBy,
    this.generalRefund,
    this.generalExpenses,
    this.totalGeneralExpenseAmount,
    this.procedureSummaries,
  });

  factory TaskAppointmentSummaryRow.fromJson(Map<String, dynamic> json) {
    return TaskAppointmentSummaryRow(
      taskAppointmentId: json[field.taskAppointmentId],
      taskAppointmentCreatedAt: json[field.taskAppointmentCreatedAt] == null ? null : DateTime.tryParse(json[field.taskAppointmentCreatedAt] ?? ''),
      taskId: json[field.taskId],
      generalDeposit: json[field.generalDeposit] == null ? null : (json[field.generalDeposit] as num?)?.toDouble(),
      generalDiscountRate: json[field.generalDiscountRate] == null ? null : (json[field.generalDiscountRate] as num?)?.toDouble(),
      generalDiscountAmount: json[field.generalDiscountAmount] == null ? null : (json[field.generalDiscountAmount] as num?)?.toDouble(),
      dueDate: json[field.dueDate] == null ? null : DateTime.tryParse(json[field.dueDate] ?? ''),
      notes: json[field.notes],
      addedBy: json[field.addedBy],
      generalRefund: json[field.generalRefund] == null ? null : (json[field.generalRefund] as num?)?.toDouble(),
      generalExpenses: json[field.generalExpenses] == null ? null : (json[field.generalExpenses] is String ? jsonDecode(json[field.generalExpenses]) : Map<String, dynamic>.from(json[field.generalExpenses])),
      totalGeneralExpenseAmount: json[field.totalGeneralExpenseAmount] == null ? null : (json[field.totalGeneralExpenseAmount] as num?)?.toDouble(),
      procedureSummaries: json[field.procedureSummaries] == null ? null : (json[field.procedureSummaries] is String ? jsonDecode(json[field.procedureSummaries]) : Map<String, dynamic>.from(json[field.procedureSummaries])),
    );
  }

  Map<String, dynamic> toJson() {
    return {
      field.taskAppointmentId: taskAppointmentId,
      field.taskAppointmentCreatedAt: taskAppointmentCreatedAt?.toIso8601String(),
      field.taskId: taskId,
      field.generalDeposit: generalDeposit,
      field.generalDiscountRate: generalDiscountRate,
      field.generalDiscountAmount: generalDiscountAmount,
      field.dueDate: dueDate?.toIso8601String(),
      field.notes: notes,
      field.addedBy: addedBy,
      field.generalRefund: generalRefund,
      field.generalExpenses: generalExpenses,
      field.totalGeneralExpenseAmount: totalGeneralExpenseAmount,
      field.procedureSummaries: procedureSummaries,
    };
  }
}
